[
 {
  "pregunta": "¿Cómo debemos renderizar componentes React utilizando ReactDOM?",
  "respuesta": "Debemos renderizar los componentes invocando al método ReactDOM.render()."
 },
 {
  "pregunta": "¿Cómo podemos integrar estilos CSS en archivos externos en las aplicaciones React?",
  "respuesta": "Debemos crear archivos CSS y luego importarlos utilizando import junto al archivo CSS ocupado."
 },
 {
  "pregunta": "¿Cuál de las siguientes afirmaciones describe correctamente una aplicación de servidor (backend)?",
  "respuesta": "Una aplicación de backend se encarga de procesar las solicitudes de los usuarios y realizar operaciones en la base de datos"
 },
 {
  "pregunta": "¿Cuál de los siguientes métodos se utiliza para eliminar todas las claves y valores almacenados en WebStorage?",
  "respuesta": "Clear()"
 },
 {
  "pregunta": "¿Cuál es el objetivo principal de las promesas en JavaScript?",
  "respuesta": "Manejar flujos de código legibles y evitar anidamiento excesivo de callbacks"
 },
 {
  "pregunta": "¿Cuál es el propósito principal de la función fetch() en JavaScript?",
  "respuesta": "Realizar peticiones de red desde un navegador web"
 },
 {
  "pregunta": "¿Cuál es el propósito principal del modelo cliente-servidor en el contexto de intercambio de información a través de Internet?",
  "respuesta": "Iniciar la comunicación mediante una petición del cliente y una respuesta del servidor."
 },
 {
  "pregunta": "¿Cuál es el propósito principal del panel de grabación de DevTools en el contexto del desarrollo web?",
  "respuesta": "Facilitar la grabación y reproducción de interacciones del usuario en una página web."
 },
 {
  "pregunta": "¿Cuál es la definición correcta para Styled Components?",
  "respuesta": "Styled Components permite definir estilos directamente en los componentes de React utilizando una sintaxis similar a CSS."
 },
 {
  "pregunta": "¿Cuál es la diferencia fundamental entre una librería y un framework en el contexto de JavaScript?",
  "respuesta": "Las librerías son conjuntos de funciones predefinidas, mientras que los frameworks son estructuras integrales que proporcionan una arquitectura y un conjunto de herramientas para desarrollar aplicaciones completas."
 },
 {
  "pregunta": "¿Cuál es la forma en la cual se comporta el renderizado condicional cuando lo aplicamos en un proyecto de React JS?",
  "respuesta": "Podemos implementar un renderizado utilizando el operador ternario o la cláusula if - else"
 },
 {
  "pregunta": "¿Cuál es la función de las props en React JS?",
  "respuesta": "Las props son utilizadas para pasar datos de un componente padre a un componente hijo."
 },
 {
  "pregunta": "¿Cuál es una característica de Styled Components en React JS?",
  "respuesta": "Proporciona una sintaxis similar a CSS para definir estilos en los componentes"
 },
 {
  "pregunta": "¿Cuál es una limitación de los archivos JSON?",
  "respuesta": "Los archivos JSON no pueden ser escritos o modificados fácilmente."
 },
 {
  "pregunta": "¿Cuál es una ventaja de utilizar Arrow functions en JS?",
  "respuesta": "Pueden prescindir de las llaves de bloque y la palabra reservada return."
 },
 {
  "pregunta": "¿Cuáles son algunos de los beneficios de utilizar Selenium WebDriver para la automatización de pruebas en aplicaciones web?",
  "respuesta": "“Multiplataforma”, “Compatibilidad con múltiples navegadores”, y “Amplia comunidad y soporte”"
 },
 {
  "pregunta": "¿Cuáles son los posibles valores que un componente recibe como argumentos?",
  "respuesta": "Props"
 },
 {
  "pregunta": "¿Por qué es conveniente utilizar arrow functions en lugar de funciones convencionales en JS?",
  "respuesta": "Porque los frameworks y librerías JS modernos promueven su uso."
 },
 {
  "pregunta": "¿Qué bloque se utiliza para envolver el código que podría generar una excepción o error?",
  "respuesta": "Try"
 },
 {
  "pregunta": "¿Qué práctica es esencial para el monitoreo y mantenimiento efectivo de las pruebas automatizadas en aplicaciones web frontend?",
  "respuesta": "Revisar periódicamente los informes de prueba generados"
 },
 {
  "pregunta": "¿Qué proceso realiza un array para crecer o decrecer la cantidad de elementos que almacena?",
  "respuesta": "Utiliza sus métodos (push, shift, pop, unshift) para agregar o eliminar elementos del array."
 },
 {
  "pregunta": "async function ejecutarInstruccion() {await tareaAsincronica();}",
  "respuesta": "LA FUNCION ASINCRONICA ejecutarintruccion() SE EJECUTA Y ESPERA QUE LA FUNCION tareaAsibcronica() TERMINE PARA SEGUIR EJECUTANDO EL RESTO DEL CODIGO ASOCIADO"
 },
 {
  "pregunta": "const carrito = [\"Elemento 1\", \"Elemento 2\", \"Elemento 3\" ]",
  "respuesta": "EL CICLO FOR ES INCORRECTO Y NO ITERARA EL ARRAY"
 },
 {
  "pregunta": "const copetes = document.querySelectorAll(\"p#copete-noticia\")",
  "respuesta": "RETORNA UNA COLECCIÓN DE ELEMENTOS QUE CUMPLAN CON EL CRITERIO INDICADO EN EL METODO"
 },
 {
  "pregunta": "Cuál de las siguientes afirmaciones es correcta en relación con el uso de Axios y Fetch en React para interactuar con APIs?",
  "respuesta": "Son librerías externas que permiten interactuar con servicios externos a través de una API en una aplicación React"
 },
 {
  "pregunta": "Cual es el alcance del lenguaje de programación JavaScript?",
  "respuesta": "PERMITE CREAR APLICACIONES IOT – PERMITE CREAR APLICACIONES MOVILES NATIVAS – PERMITE CREAR APLICACIONES WEB BACKEND – PERMITE CREAR APLICACIONES WEB FRONTEND"
 },
 {
  "pregunta": "Cuál es el código de estado de una respuesta HTML que indica un éxito en la petición?",
  "respuesta": 200
 },
 {
  "pregunta": "Cuál es el propósito del método cath() en las promesas JavaScript?",
  "respuesta": "CONTROLAR ERRORES Y MANEJAR EL RECHAZO DE UNA PROMESA"
 },
 {
  "pregunta": "Cual es la finalidad de la función <activarClickEnBotonesEliminar()>?",
  "respuesta": "ASIGNAR EL EVENTO CLICK A LOS BOTONES ELIMINAR DE LA TABLA PARA ELIMINAR PRODUCTOS"
 },
 {
  "pregunta": "Cual es la herramienta mas adecuada para generar bloques de HTML dinámicos e interactivos?",
  "respuesta": "Template string"
 },
 {
  "pregunta": "Cual es una forma obsoleta de manejar eventos en JavaScript?",
  "respuesta": "Atributos ON"
 },
 {
  "pregunta": "Cuáles son las ventajas de utilizar el paradigma de Programación Orientada a Objetos (POO)?",
  "respuesta": "Facilita la representación de objetos del mundo real.- Permite una organización más estructurada y ordenada del código.- Promueve la reutilización de código.- Simplifica la comprensión y el mantenimiento del código."
 },
 {
  "pregunta": "Cuáles son las ventajas de utilizar peticiones fetch() basadas en promesas JS?",
  "respuesta": "Compatibilidad – Interoperabilidad – Simplicidad"
 },
 {
  "pregunta": "Cuáles son los métodos de acceso convencionales utilizados en JavaScript para conectarse a elementos HTML?",
  "respuesta": "GetElementById – getElementsByClassName – getElementsByTagName"
 },
 {
  "pregunta": "Cuales son los tipos de funciones que se pueden definir en JavaScript?",
  "respuesta": "FUNCIONES CON PARAMETROS – FUNCIONES CON RETORNOS – FUNCIONES SIMPLES"
 },
 {
  "pregunta": "Cuando creamos un componente de clase en react, este tiene un método obligatorio. El mismo se llama:",
  "respuesta": "render()"
 },
 {
  "pregunta": "Cuando definimos una función asincrónica con JavaScript, podemos aplicar una cláusula que permite esperar la ejecución de determinadas tareas que pueden durar un tiempo indeterminado. Identifica cuál es el nombre de la cláusula que nos referimos:",
  "respuesta": "await function(...)"
 },
 {
  "pregunta": "Cuando hablamos de intercambiar información o datos con un servidor, este procedimiento se realiza utilizando un formato de transporte estandarizado. Dentro de los formatos más populares de transporte, encontramos a:",
  "respuesta": "XML y JSON"
 },
 {
  "pregunta": "Cuando hablamos de utilizar estilos en línea dentro de los componentes React, ¿de qué forma debemos definir los estilos CSS para luego aplicarlos en un componente?",
  "respuesta": "Definiendo un objeto literal."
 },
 {
  "pregunta": "Cuando utilizamos las cláusulas try - catch - finally, podemos definir una estructura de ejecución que controle cualquier error posible. Más allá del control generado en el código, una de las cláusulas puede ser obviada en el uso cotidiano del control de ejecución. A continuación, identificar cuál es esta última cláusula:",
  "respuesta": "Finally"
 },
 {
  "pregunta": "Cuando utilizamos promesas JS para definir tareas asíncronas, junto al objeto promise utilizamos los métodos de control que nos permiten definir qué hacer ante determinadas situaciones. Estos métodos de control son:",
  "respuesta": "Then, Catch, Finally"
 },
 {
  "pregunta": "Cuando utilizamos Template Literals dentro de bloques de código HTML definidos como Template Strings,¿cuál es la forma correcta de mostrar el contenido de la variable, constante u objeto literal en HTML?",
  "respuesta": "Utilizando comilla invertida o backtick para intercalar el elemento literal \"<p>${resultado}<\/p>\""
 },
 {
  "pregunta": "Debemos conectarnos a todos los bloques <div> que poseen la clase CSS div-card, con el objetivo de agregarle una nueva clase CSS utilizando classList.add(). Para poder realizar este proceso, necesitamos crear una colección de elementos <div> que posean la clase CSS mencionada.¿Cuál es el código apropiado para dicha tarea?",
  "respuesta": "“const divCards = document.querySelectorAll(‘div.div-card’)”"
 },
 {
  "pregunta": "Dentro de un tag <ul> debemos agregar las diferentes categorías de productos, almacenadas en un array de elementos llamado categorías. Para ello, crearemos un elemento listItem por cada categoría.¿Cuál es la forma correcta de realizar esta tarea?",
  "respuesta": "const li = \"<li>${categoría}<\/li>\" seguido de ul.innerHTML += li"
 },
 {
  "pregunta": "Disponemos de varias cards HTML que muestran productos en pantalla. Cada una de estas cards posee un tag que permite agregar el producto a un carrito de compras. Al pulsar el botón de cualquiera de estas cards, evento “click”, necesitamos que el mismo genere una animación prearmada en una clase CSS genérica.¿De qué forma podríamos incluir la clase CSS al momento de hacer click sobre el botón HTML?",
  "respuesta": "button.className += ‘ animacion-css-button’; button.classList.add(‘animacion-css-button’)"
 },
 {
  "pregunta": "divCard.classList.toggle ( \"card-selected\" )",
  "respuesta": "AGREGARA LA CLASE CSS DENOMINADA <card-selected>"
 },
 {
  "pregunta": "El evento JavaScript “hashchange” nos permite gestionar",
  "respuesta": "La detección del cambio de URL sirviendo contenido."
 },
 {
  "pregunta": "El objeto promise es una herramienta que nos permite crear objetos asíncronos. El mismo posee tres posibles estados. Estos son:",
  "respuesta": "Fulfilled, pending, rejected."
 },
 {
  "pregunta": "En el siguiente fragmento de código, identificar la función utilizada para detener la ejecución de una tarea que se repite cada 1000 milisegundos:",
  "respuesta": "clearInterval"
 },
 {
  "pregunta": "Entendiendo la importancia de cada navegador web y su motor web asociado, el cual se ocupa de interpretar el código (HTML, CSS y JS) descargado desde un sitio web, indicar cuántos intérpretes posee el motor de un navegador web.",
  "respuesta": "Dos"
 },
 {
  "pregunta": "Estamos trabajando en generar un mapeo de datos sobre los elementos de un array. ¿Qué método de orden superior nos permite realizar esto?",
  "respuesta": "map"
 },
 {
  "pregunta": "Estamos trabajando en un proyecto de desarrollo web ¿Cuáles son las formas comunes de crear objetos en JavaScript?",
  "respuesta": "Crear objetos utilizando funciones constructoras.- Utilizar clases de JavaScript para definir la estructura y comportamiento del objeto.- Utilizar un objeto literal para definir directamente las propiedades y métodos del objeto."
 },
 {
  "pregunta": "Estamos trabajando en un proyecto de desarrollo web. ¿Cuáles son las formas comunes de crear objetos en JavaScript?",
  "respuesta": "Crear objetos utilizando funciones constructoras. - Utilizar clases de JavaScript para definir la estructura y comportamiento del objeto. - Utilizar un objeto literal para definir directamente las propiedades y métodos del objeto."
 },
 {
  "pregunta": "fetch(\"http:\/\/example.com\/movies.json\")",
  "respuesta": "SU FUNCIONAMIENTO SE BASA EN PROMESAS JS"
 },
 {
  "pregunta": "finally(() => console.warn",
  "respuesta": "ES OPCIONAL, Y SU CODIGO SE EJECUTARÁ INDISTINTAMENTE SI LA PROMESA SE RESUELVE O ES RECHAZADA"
 },
 {
  "pregunta": "Identificar cuál es la diferencia entre la implementación de state y la implementación de props en una aplicación React JS",
  "respuesta": "State para permite representar datos y que estos se puedan modificar internamente en un componente, mientras que props posee un estado inmutable, y solo se utiliza para transmitir información."
 },
 {
  "pregunta": "if (usuarioLogueado !=== false)",
  "respuesta": "OPERADOR DE COMPARACION IMPLICITAMENTE IGUAL A"
 },
 {
  "pregunta": "La definición correcta para un componente react es:",
  "respuesta": "Crear un fragmento de código reutilizable que permite crear un elemento react."
 },
 {
  "pregunta": "La definición de un componente de clases se realiza con la estructura inicial:",
  "respuesta": "Class Componente extends Component {...}"
 },
 {
  "pregunta": "Las aplicaciones de una sola página (SPA) se pueden crear únicamente con React JS",
  "respuesta": false
 },
 {
  "pregunta": "let nombreCompleto = \"Teclab\"",
  "respuesta": "Camel Case"
 },
 {
  "pregunta": "let resultado = 1975 * nro … const resultado = 1975 * nro",
  "respuesta": "CUANDO EXISTE UNA SEGUNDA FUNCION, ESTA DEPENDE SIEMPRE DE LA DEFINICION DEL RETORNO IMPLICITO"
 },
 {
  "pregunta": "let valor = 2103 … console.error(se ha producido un error inesperado)",
  "respuesta": "NUNCA SE EJECUTARÁ console.error()"
 },
 {
  "pregunta": "localStorage.setItem(\"carritoProductos\", carrito)",
  "respuesta": "LOCALSTORAGE ALMACENARA ERRONEAMENTE EL CARRITO DE PRODUCTOS BAJO LA CLAVE"
 },
 {
  "pregunta": "Por que son importantes las herramientas para desarrollador en el navegador web?",
  "respuesta": "PORQUE PERMITEN EJECUTAR CODIGO JAVASCRIPT EN LA CONSOLA DEL NAVEGADOR"
 },
 {
  "pregunta": "Que es un PWA (Progresive Web App)?",
  "respuesta": "UNA APLICACIÓN WEB QUE UTILIZA HTML, CSS Y JAVASCRIPT PARA FUNCIONAR"
 },
 {
  "pregunta": "Que método de arrays podemos utilizar para verificar si un elemento especifico existe en el array?",
  "respuesta": "Includes()"
 },
 {
  "pregunta": "Que método introdujo la librería JQuery para simplificar el intercambio de datos con un servidor en JavaScript?",
  "respuesta": "AJAX"
 },
 {
  "pregunta": "Que son los componentes en React?",
  "respuesta": "Fragmentos simples de código JavaScript que permiten generar elementos React"
 },
 {
  "pregunta": "Tenemos el siguiente bloque de código: [{“id”: 1, “nombre”: “Producto 1”, “importe”: 300}, {“id”: 2, “nombre”: “Producto 2”, “importe”: 210}] El mismo representa al siguiente tipo de datos:",
  "respuesta": "Un array JSON"
 },
 {
  "pregunta": "Tenemos el siguiente bloque de código: fetch(URL) .then((response)=> response.json) .then((data)=> console.table(data)) En este ejemplo, la palabra o parámetro response, se ocupa de:",
  "respuesta": "Acarrear toda la respuesta del endpoint peticionado"
 },
 {
  "pregunta": "Tenemos un HTML el cual posee divs anidados que conforman una Card HTML para visualizar productos en pantalla. Toda esta estructura HTML está almacenada en una constante llamada cardHTML utilizando template literals + string. La forma más efectiva de armar un bloque HTML de múltiples cards en un elemento contenedor, es:",
  "respuesta": "contenedor.innerHTML += cardHTML"
 },
 {
  "pregunta": "Tenemos una aplicación web con una imagen que representa un carrito de compras. Esta imagen está referenciada en un tag HTML img, y posee una clase CSS denominada img-carrito. Además, cuenta con una referencia llamada imgCarrito en el atributo id. Si debemos referenciar una constante en JavaScript que nos enlace con el tag HTML en cuestión definiendo su atributo id. ¿Cuál es el código correcto para realizar esta tarea?",
  "respuesta": "\"const btnCarrito = document.querySelector(‘img#imgCarrito’)\""
 },
 {
  "pregunta": "Una ventaja de utilizar arrow functions en JavaScript es que se pueden prescindir de las llaves de bloque y la palabra reservada return en determinados casos.",
  "respuesta": true
 }
]